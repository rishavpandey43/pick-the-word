{"version":3,"sources":["reduxConfig/actions/actionCreators.js","components/firstComponent/First.jsx","helperFunction/helper.js","components/secondComponent/Second.jsx","App.js","ReduxApp.js","serviceWorker.js","reduxConfig/reducers/sentenceData.js","reduxConfig/reducers/userAnswer.js","reduxConfig/reducers/index.js","reduxConfig/store.js","index.js"],"names":["saveSentence","sentenceData","type","splitTheSentence","jumbleWords","saveUserAnswer","userAns","resetState","First","props","handleInputChange","e","setState","inputValue","target","value","preventDefault","state","className","onSubmit","this","bind","placeholder","onChange","required","Component","matchSameArray","firstArray","secondArray","checkSame","length","i","Second","addOptionToBox","option","optionIndex","tempJumbledWord","indexOf","tempUserAnswer","push","splice","saveAnswer","arrayOfWord","checkAnswer","isAnswerCorrect","helper","alert","arrayFormat","jumbledWord","userAnswer","nextProps","userAnswerOption","jumbledWordOption","map","key","onClick","rawFormat","App","ReduxApp","connect","dispatch","bindActionCreators","actionCreators","Boolean","window","location","hostname","match","action","tempState","split","array","tempArray","j","Math","floor","random","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7863f123.chunk.js","sourcesContent":["// save sentence\nexport function saveSentence(sentenceData) {\n  return {\n    type: \"SAVE SENTENCE\",\n    sentenceData\n  };\n}\n\n// split the sentence\nexport function splitTheSentence() {\n  return {\n    type: \"SPLIT THE SENTENCE\"\n  };\n}\n\n// jumble the word\nexport function jumbleWords() {\n  return {\n    type: \"JUMBLE THE WORD\"\n  };\n}\n\n// check correct answer\nexport function saveUserAnswer(userAns) {\n  return {\n    type: \"SAVE USER ANSWER\",\n    userAns\n  };\n}\n\nexport function resetState() {\n  return {\n    type: \"RESET STATE\"\n  };\n}\n","import React, { Component } from \"react\";\n\nclass First extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\"\n    };\n  }\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  saveSentence = (e) => {\n    e.preventDefault();\n    if (this.state.inputValue) {\n      this.props.saveSentence(this.state.inputValue);\n      this.props.splitTheSentence();\n      this.props.jumbleWords();\n      this.props.resetState();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"firstComp-main-div mb-3\">\n        <div className=\"enter-sentence-div\">\n          <div className=\"head-div\">\n            <h1>Enter the sentence:</h1>\n          </div>\n          <div className=\"form-div\">\n            <form onSubmit={this.saveSentence.bind(null)}>\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"enter the words with space to create the question\"\n                  value={this.state.inputValue}\n                  onChange={this.handleInputChange.bind(null)}\n                  required\n                />\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Submit and Start Test\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default First;\n","export function jumbleWords(array) {\n  let tempArray = [...array];\n  for (let i = tempArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [tempArray[i], tempArray[j]] = [tempArray[j], tempArray[i]];\n  }\n  if (!matchSameArray(array, tempArray)) {\n    return tempArray;\n  }\n  else\n  // handles if jumbled words are same as main array\n    return jumbleWords(array);\n}\n\nexport function matchSameArray(firstArray, secondArray) {\n  let checkSame = false;\n  if (firstArray.length === secondArray.length) {\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] === secondArray[i]) {\n        checkSame = true;\n      }\n      else if (firstArray[i] !== secondArray[i]) {\n        checkSame = false;\n        break;\n      }\n    }\n  }\n  else\n    checkSame = false;\n  return checkSame;\n}\n","import React, { Component } from \"react\";\nimport \"./second.css\";\n\nimport * as helper from \"../../helperFunction/helper\";\n\nclass Second extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checkAnswer: false,\n      arrayOfWord: this.props.sentenceData.arrayFormat,\n      jumbledWord: this.props.sentenceData.jumbledWord,\n      tempJumbledWord: this.props.sentenceData.jumbledWord,\n      userAnswer: this.props.userAnswer,\n      tempUserAnswer: this.props.userAnswer,\n      isAnswerCorrect: false\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      arrayOfWord: nextProps.sentenceData.arrayFormat,\n      jumbledWord: nextProps.sentenceData.jumbledWord,\n      tempJumbledWord: nextProps.userAnswer.length ===0\n        ? nextProps.sentenceData.jumbledWord\n        : [],\n      userAnswer: nextProps.userAnswer,\n      tempUserAnswer: nextProps.userAnswer\n      // isAnswerCorrect: nextProps.sentenceData.jumbledWord.length !== 0 ? false : true\n    });\n  }\n\n  addOptionToBox = option => {\n    let optionIndex = this.state.tempJumbledWord.indexOf(option);\n    let tempUserAnswer = [...this.state.tempUserAnswer];\n    let tempJumbledWord = [...this.state.tempJumbledWord];\n    tempUserAnswer.push(option);\n    tempJumbledWord.splice(optionIndex, 1);\n    this.setState({ tempUserAnswer, tempJumbledWord });\n  };\n\n  saveAnswer = () => {\n    if (this.state.tempUserAnswer.length === this.state.arrayOfWord.length) {\n      this.setState({ checkAnswer: true });\n      this.props.saveUserAnswer(this.state.tempUserAnswer);\n      this.setState({\n        isAnswerCorrect: helper.matchSameArray(\n          this.state.arrayOfWord,\n          this.state.tempUserAnswer\n        )\n      });\n    } else alert(\"Fill all the option to submit answer\");\n  };\n\n  render() {\n    let jumbledWordOption = [];\n    let userAnswerOption = [];\n    if (this.state.tempJumbledWord) {\n      jumbledWordOption = this.state.tempJumbledWord.map((option, i) => (\n        <span\n          key={i}\n          className=\"option-box\"\n          onClick={this.addOptionToBox.bind(null, option)}\n        >\n          {option}\n        </span>\n      ));\n    }\n\n    userAnswerOption = this.state.tempUserAnswer.map((option, i) => (\n      <span\n        key={i}\n        className=\"option-box\"\n        onClick={this.addOptionToBox.bind(null, option)}\n      >\n        {option}\n      </span>\n    ));\n\n    return (\n      <div className=\"secondComp-main-div mt-2 mb-5\">\n        <div className=\"grid-div\">\n          <div className=\"grid-box\">\n            <div className=\"head-div text-center pt-3\">\n              <h3>Pick the words in order:</h3>\n            </div>\n          </div>\n          <div className=\"grid-box\">\n            <div className=\"sentence-grid text-center p-3\">\n              <span className=\"custom-text\">\n                {this.props.sentenceData.rawFormat}\n              </span>\n            </div>\n          </div>\n          <div className=\"grid-box\">\n            <div className=\"answer-grid text-center pt-3\">\n              {userAnswerOption}\n            </div>\n          </div>\n          <div className=\"grid-box\">\n            <div className=\"option-grid text-center pt-3\">\n              {this.state.userAnswer.length === 0 ? jumbledWordOption : \"\"}\n              {this.state.checkAnswer && this.state.userAnswer.length !== 0 ? (\n                this.state.isAnswerCorrect ? (\n                  <span className=\"result-box bg-success\">Correct Answer :)</span>\n                ) : (\n                  <span className=\"result-box bg-danger\">Wrong Answer :(</span>\n                )\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n          <button\n            type=\"submit\"\n            className=\"btn btn-danger mt-3\"\n            onClick={this.props.resetState}\n          >\n            Reset Question\n          </button>\n          <button\n            type=\"submit\"\n            className=\"btn btn-success ml-3 mt-3\"\n            onClick={this.saveAnswer.bind(null)}\n          >\n            Check Answer\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Second;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport First from \"./components/firstComponent/First\";\nimport Second from \"./components/secondComponent/Second\";\n\nfunction App(props) {\n  return (\n    <div className=\"container mt-2\">\n      <div className=\"row\">\n        <div className=\"col-xs-12 col-sm-6\">\n          <First {...props}></First>\n        </div>\n        <div className=\"col-xs-12 col-sm-6\">\n          <Second {...props}></Second>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport * as actionCreators from \"./reduxConfig/actions/actionCreators\";\n\nimport App from \"./App\";\n\nfunction mapStateToProps(state) {\n  return {\n    sentenceData: state.sentenceData,\n    userAnswer: state.userAnswer\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(actionCreators, dispatch);\n}\n\nconst ReduxApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default ReduxApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as helper from \"../../helperFunction/helper\";\n\nfunction sentenceData(state = [], action) {\n  switch (action.type) {\n    case \"SAVE SENTENCE\": {\n      let tempState = { ...state };\n      tempState.rawFormat = action.sentenceData;\n      return tempState;\n    }\n    case \"SPLIT THE SENTENCE\": {\n      let tempState = { ...state };\n      tempState.arrayFormat = tempState.rawFormat.split(\" \");\n      return tempState;\n    }\n    case \"JUMBLE THE WORD\": {\n      let tempState = { ...state };\n      tempState.jumbledWord = helper.jumbleWords(tempState.arrayFormat);\n      return tempState;\n    }\n    default:\n      return state;\n  }\n}\n\nexport default sentenceData;\n","function userAnswer(state = [], action) {\n  switch (action.type) {\n    case \"SAVE USER ANSWER\": {\n      let tempState = { ...state };\n      tempState = action.userAns;\n      return tempState;\n    }\n    case \"RESET STATE\": {\n      let tempState = { ...state };\n      tempState = [];\n      return tempState;\n    }\n    default:\n      return state;\n  }\n}\n\nexport default userAnswer;\n","import { combineReducers } from \"redux\";\n\nimport sentenceData from \"./sentenceData\";\nimport userAnswer from \"./userAnswer\";\n\nconst rootReducer = combineReducers({sentenceData, userAnswer});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\n\nimport rootReducer from \"./reducers/index\";\n\nconst defaultState = {\n  sentenceData: {\n    rawFormat: \"\",\n    arrayFormat: [],\n    jumbledWord: []\n  },\n  userAnswer: []\n};\n\nconst store = createStore(rootReducer, defaultState);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport ReduxApp from \"./ReduxApp\"\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./reduxConfig/store\";\n\nfunction MyApp() {\n  return (\n    <Provider store={store}>\n      <ReduxApp></ReduxApp>\n    </Provider>\n  );\n}\n\nReactDOM.render(<MyApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}